//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/PlayerSwipeAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerSwipeAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerSwipeAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerSwipeAction"",
    ""maps"": [
        {
            ""name"": ""Swipe Map"",
            ""id"": ""3fb3e00f-7680-4a99-9f42-b364a0aaf1bb"",
            ""actions"": [
                {
                    ""name"": ""Player Contact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dac642f4-ed8a-4e0b-b1c0-2babbe710a6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Contact Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6e27fad6-d7b6-49e5-8ed5-0fc514b83a66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9ab1af5-0eba-471f-b7f7-c4aee65d8976"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d7d3822-b782-4ef7-b4ce-e554efd2ae90"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f08acb5-398d-4480-a812-76b1a8395c4c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d43a7723-5525-4eeb-b333-497f593428f0"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Contact Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Swipe Map
        m_SwipeMap = asset.FindActionMap("Swipe Map", throwIfNotFound: true);
        m_SwipeMap_PlayerContact = m_SwipeMap.FindAction("Player Contact", throwIfNotFound: true);
        m_SwipeMap_ContactPosition = m_SwipeMap.FindAction("Contact Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Swipe Map
    private readonly InputActionMap m_SwipeMap;
    private List<ISwipeMapActions> m_SwipeMapActionsCallbackInterfaces = new List<ISwipeMapActions>();
    private readonly InputAction m_SwipeMap_PlayerContact;
    private readonly InputAction m_SwipeMap_ContactPosition;
    public struct SwipeMapActions
    {
        private @PlayerSwipeAction m_Wrapper;
        public SwipeMapActions(@PlayerSwipeAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerContact => m_Wrapper.m_SwipeMap_PlayerContact;
        public InputAction @ContactPosition => m_Wrapper.m_SwipeMap_ContactPosition;
        public InputActionMap Get() { return m_Wrapper.m_SwipeMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeMapActions set) { return set.Get(); }
        public void AddCallbacks(ISwipeMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Add(instance);
            @PlayerContact.started += instance.OnPlayerContact;
            @PlayerContact.performed += instance.OnPlayerContact;
            @PlayerContact.canceled += instance.OnPlayerContact;
            @ContactPosition.started += instance.OnContactPosition;
            @ContactPosition.performed += instance.OnContactPosition;
            @ContactPosition.canceled += instance.OnContactPosition;
        }

        private void UnregisterCallbacks(ISwipeMapActions instance)
        {
            @PlayerContact.started -= instance.OnPlayerContact;
            @PlayerContact.performed -= instance.OnPlayerContact;
            @PlayerContact.canceled -= instance.OnPlayerContact;
            @ContactPosition.started -= instance.OnContactPosition;
            @ContactPosition.performed -= instance.OnContactPosition;
            @ContactPosition.canceled -= instance.OnContactPosition;
        }

        public void RemoveCallbacks(ISwipeMapActions instance)
        {
            if (m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwipeMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SwipeMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwipeMapActions @SwipeMap => new SwipeMapActions(this);
    public interface ISwipeMapActions
    {
        void OnPlayerContact(InputAction.CallbackContext context);
        void OnContactPosition(InputAction.CallbackContext context);
    }
}
